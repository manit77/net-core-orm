@using CoreORM
@using CoreUtils
@model DBDatabase
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Common;
using System.Data;
using System.Data.SqlClient;
using CoreUtils;

//Do not modify.
//Code generated using custom ORM Mapper on @DateTime.Now
namespace @(Model.CodeNameSpace)
{
    public static partial class DataAccess
    {
        public static IDatabase DB { get; set; }
@{
    @:        #region execute code
    @:        /*

    foreach (var table in Model.Tables)
    {
        string tablename = table.Name;

        string pkFunctionArgs = "";
        string pkFunctionParams = "";

        foreach (var pkCol in table.PrimaryKeys)
        {
            //get params
            if (pkFunctionArgs.Length > 0)
            {
                pkFunctionArgs = pkFunctionArgs + ", ";
                pkFunctionParams = pkFunctionParams + ", ";
            }
            pkFunctionArgs += pkCol.MappedDataType.CodeType + " " + pkCol.Name;
            pkFunctionParams += " " + pkCol.Name;
        }
    }//end table loop
    @:        */
    @:        #endregion
    string codenewParatersDef = "List<IDbDataParameter> parameters = new List<IDbDataParameter>();";
    foreach (var table in Model.Tables)
    {
        string tablename = table.Name;

        string pkFunctionArgs = "";
        string pkFunctionParams = "";
        string listDef = "List<" + tablename + "> list = new List<" + tablename + ">();";

        foreach (var pkCol in table.PrimaryKeys)
        {
            //get params
            if (pkFunctionArgs.Length > 0)
            {
                pkFunctionArgs = pkFunctionArgs + ", ";
                pkFunctionParams = pkFunctionParams + ", ";
            }
            pkFunctionArgs += pkCol.MappedDataType.CodeType + " " + pkCol.Name;
            pkFunctionParams += " " + pkCol.Name;
        }
        ///// GET ////

        @:            #region @(tablename)
        @:            public static @(tablename)Base @(tablename)_Get(@(pkFunctionArgs))
        @:            {
        @:            @(tablename)Base model = null;
        @:            IDatabase db = DataAccess.DB;
        @:            @(Html.Raw(codenewParatersDef))

        foreach (var pkCol in table.PrimaryKeys)
        {
            string pkname = pkCol.Name;
            @:            parameters.Add(db.GetParameter("@(Html.Raw("@"))@(pkname)", @(pkname)));
        }

        @:            IDataReader r = null;
        @:            try
        @:            {
        @:              r = db.GetDataReader(SQLStrings.@(tablename)_Select, parameters, CommandType.Text);
        @:              if (r.Read())
        @:              {

        foreach (var col in table.Columns)
        {
            @:                int pos@(col.Name) = r.GetOrdinal("@(col.Name)");
        }
        @:                  model = new @(tablename)Base {
        foreach (var col in table.Columns)
        {
            if (col.IsNullable)
            {
                @:                      @(col.Name) = Data.CastIt@(Html.Raw("<"))@(col.MappedDataType.CodeType)@(Html.Raw(">"))(r[pos@(col.Name)]),
            }
            else
            {
                @:                      @(col.Name) = (@(col.MappedDataType.CodeType))(r[pos@(col.Name)]),
            }
        }

        @:                  };
        @:              }
        @:              r.Close();
        @:            }
        @:            catch
        @:            {
        @:              try
        @:              {
        @:                  if(r != null)
        @:                  {
        @:                      // don't do this in finally clause or reader will not close
        @:                      r.Close();
        @:                      r.Dispose();
        @:                  }
        @:              } catch { }
        @:              throw;
        @:            }
        @:              return model;
        @:            }
        ///// GET DataRow ////
        @:            public static @(tablename)Base @(tablename)_Get(DataRow r)
        @:            {
        @:            @(tablename)Base model = new @(tablename)Base()
        @:            {

        foreach (var col in table.Columns)
        {
            if (col.IsNullable)
            {
                @:                @(col.Name) = Data.CastIt@(Html.Raw("<"))@(col.MappedDataType.CodeType)@(Html.Raw(">"))(r["@(col.Name)"]),
            }
            else
            {
                @:                @(col.Name) = (@(col.MappedDataType.CodeType))(r["@(col.Name)"]),
            }
        }
        @:            };
        @:            return model;
        @:            }
        ///// SAVE ////
        @:            public static int @(tablename)_Save(I@(tablename) _@(tablename))
        @:            {
        @:            IDatabase db = DataAccess.DB;
        @:            @(Html.Raw(codenewParatersDef))
        if (table.Id != null)
        {
            @:            IDbDataParameter paramId = db.GetParameterOut("@(Html.Raw("@"))@(table.Id.Name)", _@(tablename).@(table.Id.Name), @(table.Id.MappedDataType.CodeDBType));
            @:            parameters.Add(paramId);
        }
        foreach (var col in table.Columns.Where(i => i.IsIdentity == false))
        {
            if (col.Name == "Id")
            {
                continue;
            }

            if (col.MappedDataType.DatabaseType == "timestamp")
            {
                continue;
            }
            if (col.MappedDataType.DatabaseType == "geography"
                || col.MappedDataType.DatabaseType == "geometry"
                || col.MappedDataType.DatabaseType == "hierarchyid"
                )
            {
                @:                    var p@(col.Name) = db.GetParameter("@(col.Name)", _@(tablename).@(col.Name));
                @:                    // p@(col.Name).SqlDbType = System.Data.SqlDbType.Udt;
                @:                    // p@(col.Name).UdtTypeName = "@(col.MappedDataType.DatabaseType)";
                @:                    parameters.Add(p@(col.Name));
            }
            else
            {
                if (col.MappedDataType.CodeType == "string" && !col.IsNullable)
                {
                    @:            parameters.Add(db.GetParameter("@(Html.Raw("@"))@(col.Name)", _@(tablename).@(col.Name) ?? ""));
                }
                else if (col.MappedDataType.CodeType == "DateTime" && !col.IsNullable)
                {
                    @:            parameters.Add(db.GetParameter("@(Html.Raw("@"))@(col.Name)", Data.DateTimeToSQLMin(_@(tablename).@(col.Name))));
                }
                else if (col.MappedDataType.CodeType == "DateTimeOffset" && !col.IsNullable)
                {
                    @:            parameters.Add(db.GetParameter("@(Html.Raw("@"))@(col.Name)", _@(tablename).@(col.Name)));
                }
                else
                {
                    @:            parameters.Add(db.GetParameter("@(Html.Raw("@"))@(col.Name)", _@(tablename).@(col.Name)));
                }
            }
        }

        @:            if(_@(tablename).@(table.Id.Name) == 0)
        @:            {
        @:              int rowsaff = db.ExecuteNonQuery(SQLStrings.@(tablename)_Insert, parameters, CommandType.Text);
        @:               _@(tablename).@(table.Id.Name) = (@(table.Id.MappedDataType.CodeType))paramId.Value;
        @:              return rowsaff;
        @:            }
        @:            else
        @:            {
        @:               return db.ExecuteNonQuery(SQLStrings.@(tablename)_Update, parameters, CommandType.Text);
        @:            }
        @:        }
        ///// Delete ////
        @:        public static int @(tablename)_Delete(int Id)
        @:        {
        @:            IDatabase db = DataAccess.DB;
        @:            @(Html.Raw(codenewParatersDef))

        foreach (var pkCol in table.PrimaryKeys)
        {
            string pkname = pkCol.Name;
            @:                IDbDataParameter param@(pkname) = new SqlParameter();
            @:                param@(pkname).ParameterName = "@(Html.Raw("@"))@(pkname)";
            @:                param@(pkname).Value = @(pkname);
            @:                parameters.Add(param@(pkname));
        }

        @:            return db.ExecuteNonQuery(SQLStrings.@(tablename)_Delete, parameters, CommandType.Text);
        @:        }

        @:        #endregion
    } //end tables loop
}
    }//end DataAccess
}//end namespace

