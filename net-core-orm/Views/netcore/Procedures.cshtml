@using CoreORM
@using System.Linq;
@model DBDatabase
using System;
using System.Collections.Generic;
using System.Text;
using System.Data.Common;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

//Do not modify.
//Code generated using custom ORM Mapper on @DateTime.Now
namespace @(Model.CodeNameSpace)
{
    public static partial class Procedures
    {
@{
    foreach (var sp in Model.Procedures)
    {
        string functionParams = "";        
        string spname = sp.Name.ToLower();       
        string codeSQLCall = sp.Name;
        string sqlFunctioncallparamlist = ""; //used to generate the sql params list
        string codeSQLCommandType = "StoredProcedure";
        bool isSearch = false;
        bool isGet = false;
        bool isSave = false;
        string paramsCode = GetParamsCode(sp.Paramaters);

        if (spname.StartsWith("search"))
        {
            isSearch = true;
        }

        if (spname.StartsWith("get"))
        {
            isGet = true;
        }

        if (spname.StartsWith("save") || spname.StartsWith("update"))
        {
            isSave = true;
        }      

        var paramsSorted = (from i in sp.Paramaters orderby i.IsOutPut descending, i.Index select i);
        foreach (var p in paramsSorted)
        {
            if (sqlFunctioncallparamlist.Length > 0)
            {
                sqlFunctioncallparamlist = sqlFunctioncallparamlist + ", ";
            }
            //i is for inner, @p1=@ip1
            sqlFunctioncallparamlist += "@" + p.Name; // + "= @i" + p.Name;


            if (functionParams.Length > 0)
            {
                functionParams = functionParams + ", ";
                //pkFunctionParams = pkFunctionParams + ", ";
            }

            if (p.IsOutPut)
            {
                functionParams += "out ";
                functionParams += p.MappedDataType.CodeType + " " + p.Name;
            }
            else
            {
                if (p.IsNullable && ORMFunctions.IsNullableType(p.MappedDataType.CodeType))
                {
                    functionParams += p.MappedDataType.CodeType + "? " + p.Name;
                }
                else
                {
                    functionParams += p.MappedDataType.CodeType + " " + p.Name;
                }

                if (p.DefaultValue.Length > 0)
                {
                    functionParams += " = " + p.DefaultValue;
                }
            }
        }


        if (isSearch)
        {
            //return IEnumerable
            @:      public static IEnumerable@(Html.Raw("<T>" + sp.Name + "<T>"))(@(Html.Raw(functionParams))){
            @:          string sql = "@(codeSQLCall)";
            @(Html.Raw(paramsCode))
            @:          return DataAccess.DB.Query@(Html.Raw("<T>"))(sql, parameters, CommandType.StoredProcedure);
            @:      }
        }
        else if (isGet)
        {
            //return DataTable
            @:      public static DataTable @(sp.Name + "_DT")(@(Html.Raw(functionParams))){
            @:          string sql = "@(codeSQLCall)";
            @(Html.Raw(paramsCode))
            @:          return DataAccess.DB.GetDataTable(sql, @(sp.Paramaters.Count == 0 ? "null" : "parameters"), CommandType.@(codeSQLCommandType));
            @:      }

            //return as object
            @:      public static IEnumerable@(Html.Raw("<T>" + sp.Name + "<T>"))(@(Html.Raw(functionParams))){
            @:          string sql = "@(codeSQLCall)";
            @(Html.Raw(paramsCode))
            @:          return DataAccess.DB.Query@(Html.Raw("<T>"))(sql, parameters, CommandType.StoredProcedure);
            @:      }

        }        
        else if (isSave)
        {
            //execute
            @:      public static void @(sp.Name)(@(Html.Raw(functionParams))){
            @(Html.Raw(paramsCode))
            @:           DataAccess.DB.ExecuteNonQuery("@(codeSQLCall)", parameters, CommandType.@(codeSQLCommandType));
            @:      }
        }
    }
}
    }
}

@functions {
    public string GetParamsCode(IEnumerable<DBParamater> paramaters)
    {
        string html = @"        List<IDbDataParameter> parameters = new List<IDbDataParameter>();";


        foreach (var p in paramaters)
        {

            string pname = p.Name;
            if (p.IsOutPut)
            {
                html += $@"
IDbDataParameter par{pname} db.GetParameterOut(""@{pname}"", {pname}, {p.MappedDataType.CodeDBType}, {p.MaxLength});
parameters.Add(par{pname});";

            }
            else
            {
                html += $@"
parameters.Add(DataAccess.DB.GetParameter(""@{pname}"", {pname}));
";
            }
        }
        return html;
    }
}
