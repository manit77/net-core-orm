@using CoreORM
@model DBDatabase
import { MySQLDB } from "../database/mysql_db";
import * as schema from "./_schema";
import { MySQLCollections } from "../database/mysql_collections";
import { DBResult, DBSaveConfig } from "../database/models";

@foreach(var table in Model.Tables) {

@: export class @(table.Name)Collection extends MySQLCollections@(Html.Raw("<"))schema.M@(table.Name)> {
@:     s = schema.@(table.Name)Schema;
@:     f = schema.@(table.Name)Fields;    
@:     constructor(db: MySQLDB) { 
@:      super(db, schema.@(table.Name)Schema);
@:     }
@:    override async Fill(model:any, fields: string[] | schema.@(table.Name)Fields[] | schema.M@(table.Name), id: number): Promise@(Html.Raw("<"))DBResult> {
@:        return await super.Fill(model, fields, id);
@:    }
@:    override async Get(fields: string[] | schema.@(table.Name)Fields[] | schema.M@(table.Name), id: number): Promise@(Html.Raw("<"))schema.M@(table.Name)> {
@:        return await super.Get(fields, id);
@:    }
@:    override async Save(model: schema.M@(table.Name), config?: DBSaveConfig): Promise@(Html.Raw("<"))DBResult> {
@:        return await super.Save(model, config);
@:    }
@:    override async Where(fields: string[] | schema.@(table.Name)Fields[] | schema.M@(table.Name), where: schema.M@(table.Name)): Promise@(Html.Raw("<"))schema.M@(table.Name)[]> {
@:        return await super.Where(fields, where);        
@:    }
@:    override async Delete(model: schema.M@(table.Name), config?: DBSaveConfig): Promise@(Html.Raw("<"))DBResult> {
@:        return await super.Delete(model, config);
@:    }
@: }

}