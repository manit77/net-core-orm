@using CoreORM
@model DBDatabase
import { MySQLDB } from "../dbcrud/mysql_db";
import * as collections from "./_collections";
import { DBResult, DBResultCode, DBSaveConfig } from "../dbcrud/models";
import * as schema from "./_schema";
import { ValidationUtils } from "../dbcrud/validators";
import { Copy, GetIdField } from "../utilities";
import { clone } from "lodash";
import { AuthTokenObject } from "../models/authToken";
import { ContainsValidDBValues } from "../dbcrud/utils";

@foreach(var table in Model.Tables){

@: export class @(table.Name)Collection {
@:     constructor(private db: MySQLDB) { }

@:     async Where(fields: schema.I@(table.Name) | schema.@(table.Name)Fields[] | object, where: schema.I@(table.Name)): Promise@(Html.Raw("<"))schema.I@(table.Name)[]>{
@:        return await collections._@(table.Name)Collection.Where@(table.Name)(this.db, fields, where);
@:    }

@:    async Get(fields: schema.I@(table.Name) | schema.@(table.Name)Fields[] | object, Id: number): Promise@(Html.Raw("<"))schema.I@(table.Name)> {        
@:        return await collections._@(table.Name)Collection.Get@(table.Name)(this.db, fields, { Id: Id });
@:    }

@:    New(): schema.I@(table.Name) {
@:        return {
    foreach(var col in table.Columns){
@:      @(col.Name) :  @(Html.Raw((col.IsNullable == true) ? "null" : col.MappedDataType.JSCodeTypeDefaultValue)),
    }
@:              };
@:    }

@:     async Save(auth: AuthTokenObject, savemodel: schema.I@(table.Name), config?: DBSaveConfig): Promise@(Html.Raw("<"))DBResult> {
@:         let errors = [];
@:         let dbresult: DBResult;
@:         let id = GetIdField(savemodel);
@:         if (id != null) {
@:             let model: schema.I@(table.Name) = null;    
@:             if (id <= 0) {
@:                model = clone(schema.@(table.Name)Schema.ObjectRef);
@:                Copy(savemodel, model, config?.ignorefields);
@:             } else {
@:                model = clone(savemodel);
@:             }
@:             if (id <= 0) {
@:                 errors = ValidationUtils.ValidateModel(config?.validators, model);
    if(table.GetColumn("UserIdCreated") != null) {
@:                 model.UserIdCreated = auth.Id;
    }
    if(table.GetColumn("DateTimeCreated") != null) {
@:                 model.DateTimeCreated = new Date();
    }
@("             } else {")
@:                 errors = ValidationUtils.ValidateModel(config?.validators, model);
    if(table.GetColumn("UserIdModified") != null) {
@:                model.UserIdModified = auth.Id;
    }
    if(table.GetColumn("DatetimeModified") != null) {
@:                model.DatetimeModified = new Date();
    }
@:             }
@:             if (errors.length == 0) {
@:                 if(config?.ignorefields) {
@:                    for(let f of config.ignorefields){
@:                        delete model[f];
@:                    }
@:                    dbresult = await this._Save(model);
@:                    savemodel.Id = model.Id;
@("             } else {")
@:                    dbresult = await this._Save(model);
@:                    savemodel.Id = model.Id;
@:                }
@("             } else {")
@:                 dbresult = new DBResult();
@:                 dbresult.Valid = false;
@:                 dbresult.MessageText = errors.join(". ").trimEnd();
@:                 dbresult.ValidationErrors = errors;
@:             }
@("             } else {")
@:             dbresult = new DBResult(false, "invalid Id.");
@:         }
@:         return dbresult;
@:     }

@:     async Delete(auth: AuthTokenObject, model: schema.I@(table.Name), config?: DBSaveConfig): Promise@(Html.Raw("<"))DBResult> {
@:         let errors = [];
@:         let dbresult: DBResult;
@:         let id = GetIdField(model);
@:         if (id != null) {
@:             errors = ValidationUtils.ValidateModel(config?.validators, model);
@:             if (errors.length == 0) {
@:                 dbresult = await this._Delete(model);
@("             } else {")
@:                 dbresult = new DBResult();
@:                 dbresult.Valid = false;
@:                 dbresult.MessageText = errors.join(". ").trimEnd();
@:             }
@("             } else {")
@:             dbresult = new DBResult(false, "invalid Id.");
@:         }
@:         return dbresult;
@:     }
    
@:     private async _Save(model: schema.I@(table.Name)): Promise@(Html.Raw("<"))DBResult> {
@:         let result = new DBResult(true);
@:         let id = GetIdField(model);
@:         let [c, msg] = ContainsValidDBValues(model);
@:         if (c == false) {
@:             result.Valid = false;
@:             result.MessageText = msg;
@:             return result;
@:         }
@:         if (model.Id <= 0) {
@:             result = await collections._@(table.Name)Collection.New@(table.Name)(this.db, model);
@:            if (result.RowsAffected <= 0) {
@:                result.Valid = false;
@:                result.MessageText = "recorded not added.";
@:                result.Code = DBResultCode.notadded;
@:            }
@("             } else {")
@:             result = await collections._@(table.Name)Collection.Update@(table.Name)(this.db, model);
@:            if (result.RowsAffected <= 0) {
@:                result.Valid = false;
@:                result.MessageText = "recorded not found.";
@:                result.Code = DBResultCode.notfound;
@:            }
@:         }
@:         return result;
@:     }

@:     private async _Delete(model: schema.I@(table.Name)): Promise@(Html.Raw("<"))DBResult> {
@:        let result = await collections._@(table.Name)Collection.Delete@(table.Name)(this.db, model);
@:        if (result.RowsAffected <= 0) {
@:            result.Valid = false;
@:            result.MessageText = "recorded not found.";
@:            result.Code = DBResultCode.notfound;
@:        }
@:        return result;
@:     }
@: }

}