@using CoreORM
@model DBDatabase
//Code generated using net-core-orm
import { MySQLDB } from "../database/mysql_db";
import { DBResult } from "../database/models";
import { isArray } from "lodash";

export class MySqlProcedures {
    constructor(private d: MySQLDB) { }
     ParseSearchResults(results: Array<any>): [Array<any>, number] {        
        // procedures contains
        // resultsData : [0] = [ rows, rows, ...ResultsHeader]
        // row definition: [1]

        let resultsData = results[0];
        resultsData.pop(); //remove the ResultsHeader

        if (resultsData.length == 1) {
            // stored procedure only has on select statement
            return [resultsData[0], resultsData[0].length];
        } else if (resultsData.length > 1) {
            // stored procedure has one select statement
            // the last select is a totalRows
            let rows = resultsData[0];
            let totalrows = rows.length;
            let totalRowsResults = resultsData[resultsData.length - 1];
            totalRowsResults = isArray(totalRowsResults) ? totalRowsResults[0] : null;
            if (totalRowsResults && Object.prototype.hasOwnProperty.call(totalRowsResults, "TotalRows")) {
                totalrows = totalRowsResults.TotalRows;
            }
            return [rows, totalrows];
        }
        return [[], 0];        
    }
@{
    foreach (var sp in Model.Procedures)
    {
        string functionParams = "";
        string spParams = "";
        string spname = sp.Name.ToLower();
        bool isSearchOrGet = false;
        bool isSearch = false;
        bool isFunction = false;
        // bool isScalar = false;
        string codeSQLCall = sp.Name;
        string sqlFunctioncallparamlist = ""; //used to generate the sql params list
        if (spname.StartsWith("search"))
        {
            isSearch = true;
        }
        if (spname.StartsWith("search") || spname.StartsWith("get") || spname.StartsWith("saveandget") || spname.StartsWith("updateandget"))
        {
            isSearchOrGet = true;

            if (sp.Type.ToLower() == "function")
            {
                isFunction = true;
            }
        }

        if (isFunction) {
            continue;
        }
        var paramsSorted = (from i in sp.Paramaters orderby i.Index select i);
        foreach (var p in paramsSorted)
        {
            if (sqlFunctioncallparamlist.Length > 0)
            {
                sqlFunctioncallparamlist = sqlFunctioncallparamlist + ", ";
                spParams = spParams + ", ";
            }

            sqlFunctioncallparamlist += "@" + p.Name; // + "= @i" + p.Name;
            spParams += "@" + p.Name + " := :" + p.Name.Replace("_", "");

            if (functionParams.Length > 0)
            {
                functionParams = functionParams + ", ";
            }

            if (p.IsOutPut)
            {
                functionParams +=  p.Name.Replace("_", "") + ": " + p.MappedDataType.JSCodeType;
            }
            else
            {
                if (p.IsNullable)
                {
                    functionParams += p.Name.Replace("_", "") + ": " + p.MappedDataType.JSCodeType + " | null";
                }
                else
                {
                    functionParams += p.Name.Replace("_", "") + ": " + p.MappedDataType.JSCodeType;
                }

                if (p.DefaultValue.Length > 0)
                {
                    //functionParams += " = " + p.DefaultValue;
                }
            }
        }

        var paramsstr = "";

        if(functionParams.Length > 0){
            paramsstr = $"params: {{ {functionParams} }}";
        }
        if (isSearchOrGet){
            if(isSearch){
@:    async @(sp.Name)(@(paramsstr)): Promise@(Html.Raw("<"))[Array@(Html.Raw("<"))any@(Html.Raw(">, number]>")) {
            } else {     
@:    async @(sp.Name)(@(paramsstr)): Promise@(Html.Raw("<"))Array@(Html.Raw("<"))any@(Html.Raw(">>")) {
            }
        } else
        {
@:    async @(sp.Name)(@(paramsstr)): Promise@(Html.Raw("<"))DBResult@(Html.Raw(">")) {
        }

        paramsstr = "";
       if(functionParams.Length > 0){
            paramsstr = ", params";
        } else {
            paramsstr = ", {}";
        }
<text>@{
    if (isSearchOrGet) {
            if(isSearch){
@:            return this.ParseSearchResults(await this.d.POOL.execute('call @(sp.Name)(@(spParams))' @(paramsstr)));
            } else {
@:            return await this.d.QuerySP('call @(sp.Name)(@(spParams))' @(paramsstr));
            }

    } else {
@:            let result = await this.d.Execute('call @(sp.Name)(@(spParams))' @(paramsstr));
@:            return result;
    }
}
}
</text>       
} //end Procedures loop
} 
}
