@using CoreORM
@model DBDatabase
//Code generated using net-core-orm

@foreach (var table in Model.Tables)
{
    string tablename = table.Name;
    string pkname = table.Id.Name;

@:export enum @(tablename)Fields {
foreach (var col in table.Columns) {
    @:  @(col.Name) = "@(col.Name)",
} //end for, Fields
@:} //end Fields @(tablename)

@:export class M@(tablename) {

    foreach (var col in table.Columns)
    {
if (col.IsNullable)
            {
@:  @(col.Name)@(col.IsPrimaryKey ? "?" : "?"): @(col.MappedDataType.JSCodeType) | null;
            }
            else
            {
@:  @(col.Name)@(col.IsPrimaryKey ? "?" : "?"): @(col.MappedDataType.JSCodeType);
            }
    }
@:} //end class M@(tablename)

@:export interface I@(tablename)TypeHelper@(Html.Raw("<"))T> {
    foreach (var col in table.Columns)
    {
@:  @(col.Name)?: T;
    }
@:} //end interface TypeHelper @(tablename)

@:export class  M@(tablename)ObjectRef  {
    foreach (var col in table.Columns) {
        @:  @(col.Name) = @(Html.Raw(col.MappedDataType.JSCodeTypeDefaultValue));
    } //end for, Fields
@:  }

@:export const @(tablename)Schema = {
@:    TableName: "@(tablename)",
@:    PKeys: [@(Html.Raw(string.Join(",", table.PrimaryKeys.Select(i=> "\"" + i.Name + "\"").ToArray())))],
@:    AutoField: "@table.Id.Name",
@:    ObjectRef : new M@(tablename)ObjectRef(),
@:    Fields : @(tablename)Fields,
@:    FieldsArr : Object.values(@(tablename)Fields)
@:} //end schema @(tablename)

} //end for each
