@using CoreORM
@model DBDatabase
//Do not modify. v1.0
//Code generated using net-core-orm

import * as mysql2 from "mysql2/promise";
import * as m from "./_models";
import * as s from "./_sqlstrings";
import * as i from './_interfaces';
export * as _interfaces from './_interfaces';

export class SqlConfig {
    user: string = "dbusername";
    password: string = "dbpassword";
    server: string = "localhost";
    database: string = "dbname";
}

export class DB {

    SQLCONFIG = new SqlConfig();
    CONNECTION : mysql2.PoolConnection | null = null;
    POOL : mysql2.Pool | null = null;

    async CreatePool() {
        this.POOL = mysql2.createPool({
            host     : this.SQLCONFIG.server,
            user     : this.SQLCONFIG.user,
            password : this.SQLCONFIG.password,
            database : this.SQLCONFIG.database,
            waitForConnections: true,
            connectionLimit: 10,
            queueLimit: 0,
            namedPlaceholders: true,
            timezone: "UTC",
            typeCast: function (field, next) {
                if (field.type == "DECIMAL" || field.type == "NEWDECIMAL") {
                    var value = field.string();
                    return (value === null) ? null : Number(value);
                }
                return next();
            }
        });
    }

    async Connect(): Promise@(Html.Raw("<"))mysql2.Connection> {       
        if(this.CONNECTION == null){
            var pool = mysql2.createPool({
                host     : this.SQLCONFIG.server,
                user     : this.SQLCONFIG.user,
                password : this.SQLCONFIG.password,
                database : this.SQLCONFIG.database,
                waitForConnections: true,
                connectionLimit: 10,
                queueLimit: 0
            });
            this.CONNECTION = await pool.getConnection();
            this.CONNECTION.config.namedPlaceholders = true;
            await this.CONNECTION.connect();
        }
        return this.CONNECTION;       
    }

    /* async QueryRows(sql: string, params : any) : Promise@(Html.Raw("<"))Array@(Html.Raw("<"))any>> {       
        let [recordsSets] = await this.POOL.query(sql, params);
        (recordsSets as Array@(Html.Raw("<"))any>).pop();
        if((recordsSets as Array@(Html.Raw("<"))any>).length == 1){
            return recordsSets[0];
        }
        return recordsSets as Array@(Html.Raw("<"))any>;      
    } */

    async QueryRows(sql: string, params: any): Promise@(Html.Raw("<"))Array@(Html.Raw("<"))any>> {
        let [recordsSets] = await this.POOL.query(sql, params);
        return recordsSets[0];
    }
    
    async QueryResults(sql: string, params: any): Promise@(Html.Raw("<"))Array@(Html.Raw("<"))any>> {
        let [recordsSets] = await this.POOL.query(sql, params);
        return recordsSets as Array@(Html.Raw("<"))any>;
    }

    ParseSearchResults(results: Array@(Html.Raw("<"))any>): [Array@(Html.Raw("<"))any>, number] {
        //remove the header info
        results.pop();
        if (results.length == 1) {
            return [results[0], results[0].length];
        } else if (results.length > 1) {
            let rows = results[0];
            let totalrows = results[0].length;                    
            if (Object.prototype.hasOwnProperty.call(results[1][0], "TotalRows")) {
                totalrows = results[1][0].TotalRows;
            }        
            return [rows, totalrows];
        }
        return [[], 0];
    }

    async Execute(sql: string, params: any): Promise@(Html.Raw("<"))m.DBResult> {
        const r = new m.DBResult();       
        let [result] = await this.POOL.execute(sql, params);
        r.RowsAffected = (result as any).affectedRows;
        r.Valid = true;
        if((result as any).insertId) {
            r.Id = (result as any).insertId;
        }       
        return r;
    }
@foreach (var table in Model.Tables)
{
    string tablename = table.Name;

    string pkFunctionArgs = "";
    string pkJSObj = "";
    string pkFunctionParams = "";
    string listDef = "List<" + tablename + "> list = new List<" + tablename + ">();";

    foreach (var pkCol in table.PrimaryKeys)
    {
        //get params
        if (pkFunctionArgs.Length > 0)
        {
            pkFunctionArgs = pkFunctionArgs + ", ";
            pkFunctionParams = pkFunctionParams + ", ";
            pkJSObj = pkJSObj + ", ";
        }
        pkFunctionArgs += pkCol.Name + ":" + pkCol.MappedDataType.JSCodeType;
        pkFunctionParams += " " + pkCol.Name;
        pkJSObj += pkCol.Name + ":" + pkCol.Name;
    }
<text>
    async Get@(tablename)(@(pkFunctionArgs)): Promise@(Html.Raw("<"))i.I@(tablename) | null> {             
        let [rows] = await this.POOL.query(s.SQLStrings.@(tablename)_Select, {@(pkJSObj)});
        var results = rows as Array@(Html.Raw("<"))any>;
        if (results.length > 0) {
            return (results[0] as any) as i.I@(tablename);
        }
        return null;
    }
    
    async Save@(tablename)(isnew: boolean | null, _@(tablename): i.I@(tablename)) : Promise@(Html.Raw("<"))m.DBResult@(Html.Raw(">")) {
        const r = new m.DBResult();                  
        var result : any;
        if((isnew == null && _@(tablename).Id == 0) || isnew == true) {
            [result] = await this.POOL.execute(s.SQLStrings.@(tablename)_Insert, _@(tablename));
            _@(tablename).@(table.Id.Name) = (result as any).insertId;
        } else {
            [result] = await this.POOL.execute(s.SQLStrings.@(tablename)_Update, _@(tablename));
        }
        r.Id = _@(tablename).@(table.Id.Name);
        r.RowsAffected = (result as any).affectedRows;
        r.Valid = true;       
        return r;
    }
    async Delete@(tablename)(@(pkFunctionArgs)) : Promise@(Html.Raw("<"))m.DBResult@(Html.Raw(">")) {
        const r = new m.DBResult();              
        let [result] = await this.POOL.execute(s.SQLStrings.@(tablename)_Delete, {@(pkJSObj)});
        r.RowsAffected = (result as any).affectedRows;
        r.Valid = true;       
        return r;
    }
</text>
    }
}